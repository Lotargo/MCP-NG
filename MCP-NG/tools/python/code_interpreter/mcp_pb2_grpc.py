# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import mcp_pb2 as mcp__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mcp_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MCPStub(object):
    """Service provided by the main MCP server to external clients.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListTools = channel.unary_unary(
                '/mcp.MCP/ListTools',
                request_serializer=mcp__pb2.ListToolsRequest.SerializeToString,
                response_deserializer=mcp__pb2.ListToolsResponse.FromString,
                _registered_method=True)
        self.RunTool = channel.unary_unary(
                '/mcp.MCP/RunTool',
                request_serializer=mcp__pb2.ToolRunRequest.SerializeToString,
                response_deserializer=mcp__pb2.ToolRunResponse.FromString,
                _registered_method=True)
        self.ProvideHumanInput = channel.unary_unary(
                '/mcp.MCP/ProvideHumanInput',
                request_serializer=mcp__pb2.ProvideHumanInputRequest.SerializeToString,
                response_deserializer=mcp__pb2.ProvideHumanInputResponse.FromString,
                _registered_method=True)
        self.GetHumanInput = channel.unary_unary(
                '/mcp.MCP/GetHumanInput',
                request_serializer=mcp__pb2.GetHumanInputRequest.SerializeToString,
                response_deserializer=mcp__pb2.GetHumanInputResponse.FromString,
                _registered_method=True)


class MCPServicer(object):
    """Service provided by the main MCP server to external clients.
    """

    def ListTools(self, request, context):
        """Returns a list of all available tools.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunTool(self, request, context):
        """Executes a specific tool by name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProvideHumanInput(self, request, context):
        """Provides the response from a human for a specific task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHumanInput(self, request, context):
        """Retrieves the response for a task that was waiting for human input.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MCPServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListTools': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTools,
                    request_deserializer=mcp__pb2.ListToolsRequest.FromString,
                    response_serializer=mcp__pb2.ListToolsResponse.SerializeToString,
            ),
            'RunTool': grpc.unary_unary_rpc_method_handler(
                    servicer.RunTool,
                    request_deserializer=mcp__pb2.ToolRunRequest.FromString,
                    response_serializer=mcp__pb2.ToolRunResponse.SerializeToString,
            ),
            'ProvideHumanInput': grpc.unary_unary_rpc_method_handler(
                    servicer.ProvideHumanInput,
                    request_deserializer=mcp__pb2.ProvideHumanInputRequest.FromString,
                    response_serializer=mcp__pb2.ProvideHumanInputResponse.SerializeToString,
            ),
            'GetHumanInput': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHumanInput,
                    request_deserializer=mcp__pb2.GetHumanInputRequest.FromString,
                    response_serializer=mcp__pb2.GetHumanInputResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcp.MCP', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mcp.MCP', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MCP(object):
    """Service provided by the main MCP server to external clients.
    """

    @staticmethod
    def ListTools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.MCP/ListTools',
            mcp__pb2.ListToolsRequest.SerializeToString,
            mcp__pb2.ListToolsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.MCP/RunTool',
            mcp__pb2.ToolRunRequest.SerializeToString,
            mcp__pb2.ToolRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProvideHumanInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.MCP/ProvideHumanInput',
            mcp__pb2.ProvideHumanInputRequest.SerializeToString,
            mcp__pb2.ProvideHumanInputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHumanInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.MCP/GetHumanInput',
            mcp__pb2.GetHumanInputRequest.SerializeToString,
            mcp__pb2.GetHumanInputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ToolStub(object):
    """Service that each individual tool must implement.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDescription = channel.unary_unary(
                '/mcp.Tool/GetDescription',
                request_serializer=mcp__pb2.GetDescriptionRequest.SerializeToString,
                response_deserializer=mcp__pb2.ToolDescription.FromString,
                _registered_method=True)
        self.Run = channel.unary_unary(
                '/mcp.Tool/Run',
                request_serializer=mcp__pb2.ToolRunRequest.SerializeToString,
                response_deserializer=mcp__pb2.ToolRunResponse.FromString,
                _registered_method=True)


class ToolServicer(object):
    """Service that each individual tool must implement.
    """

    def GetDescription(self, request, context):
        """Returns the description of the tool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Run(self, request, context):
        """Runs the tool with the given arguments.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToolServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDescription,
                    request_deserializer=mcp__pb2.GetDescriptionRequest.FromString,
                    response_serializer=mcp__pb2.ToolDescription.SerializeToString,
            ),
            'Run': grpc.unary_unary_rpc_method_handler(
                    servicer.Run,
                    request_deserializer=mcp__pb2.ToolRunRequest.FromString,
                    response_serializer=mcp__pb2.ToolRunResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcp.Tool', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mcp.Tool', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Tool(object):
    """Service that each individual tool must implement.
    """

    @staticmethod
    def GetDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.Tool/GetDescription',
            mcp__pb2.GetDescriptionRequest.SerializeToString,
            mcp__pb2.ToolDescription.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.Tool/Run',
            mcp__pb2.ToolRunRequest.SerializeToString,
            mcp__pb2.ToolRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
