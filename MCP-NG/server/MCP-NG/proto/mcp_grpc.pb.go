// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: MCP-NG/proto/mcp.proto

package mcp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MCPClient is the client API for MCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MCPClient interface {
	// Returns a list of all available tools.
	ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error)
	// Executes a specific tool by name.
	RunTool(ctx context.Context, in *ToolRunRequest, opts ...grpc.CallOption) (*ToolRunResponse, error)
}

type mCPClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPClient(cc grpc.ClientConnInterface) MCPClient {
	return &mCPClient{cc}
}

func (c *mCPClient) ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error) {
	out := new(ListToolsResponse)
	err := c.cc.Invoke(ctx, "/mcp.MCP/ListTools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPClient) RunTool(ctx context.Context, in *ToolRunRequest, opts ...grpc.CallOption) (*ToolRunResponse, error) {
	out := new(ToolRunResponse)
	err := c.cc.Invoke(ctx, "/mcp.MCP/RunTool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCPServer is the server API for MCP service.
// All implementations must embed UnimplementedMCPServer
// for forward compatibility
type MCPServer interface {
	// Returns a list of all available tools.
	ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error)
	// Executes a specific tool by name.
	RunTool(context.Context, *ToolRunRequest) (*ToolRunResponse, error)
	mustEmbedUnimplementedMCPServer()
}

// UnimplementedMCPServer must be embedded to have forward compatible implementations.
type UnimplementedMCPServer struct {
}

func (UnimplementedMCPServer) ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTools not implemented")
}
func (UnimplementedMCPServer) RunTool(context.Context, *ToolRunRequest) (*ToolRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTool not implemented")
}
func (UnimplementedMCPServer) mustEmbedUnimplementedMCPServer() {}

// UnsafeMCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServer will
// result in compilation errors.
type UnsafeMCPServer interface {
	mustEmbedUnimplementedMCPServer()
}

func RegisterMCPServer(s grpc.ServiceRegistrar, srv MCPServer) {
	s.RegisterService(&MCP_ServiceDesc, srv)
}

func _MCP_ListTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).ListTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcp.MCP/ListTools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).ListTools(ctx, req.(*ListToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCP_RunTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).RunTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcp.MCP/RunTool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).RunTool(ctx, req.(*ToolRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MCP_ServiceDesc is the grpc.ServiceDesc for MCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.MCP",
	HandlerType: (*MCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTools",
			Handler:    _MCP_ListTools_Handler,
		},
		{
			MethodName: "RunTool",
			Handler:    _MCP_RunTool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MCP-NG/proto/mcp.proto",
}

// ToolClient is the client API for Tool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolClient interface {
	// Returns the description of the tool.
	GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*ToolDescription, error)
	// Runs the tool with the given arguments.
	Run(ctx context.Context, in *ToolRunRequest, opts ...grpc.CallOption) (*ToolRunResponse, error)
}

type toolClient struct {
	cc grpc.ClientConnInterface
}

func NewToolClient(cc grpc.ClientConnInterface) ToolClient {
	return &toolClient{cc}
}

func (c *toolClient) GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*ToolDescription, error) {
	out := new(ToolDescription)
	err := c.cc.Invoke(ctx, "/mcp.Tool/GetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolClient) Run(ctx context.Context, in *ToolRunRequest, opts ...grpc.CallOption) (*ToolRunResponse, error) {
	out := new(ToolRunResponse)
	err := c.cc.Invoke(ctx, "/mcp.Tool/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServer is the server API for Tool service.
// All implementations must embed UnimplementedToolServer
// for forward compatibility
type ToolServer interface {
	// Returns the description of the tool.
	GetDescription(context.Context, *GetDescriptionRequest) (*ToolDescription, error)
	// Runs the tool with the given arguments.
	Run(context.Context, *ToolRunRequest) (*ToolRunResponse, error)
	mustEmbedUnimplementedToolServer()
}

// UnimplementedToolServer must be embedded to have forward compatible implementations.
type UnimplementedToolServer struct {
}

func (UnimplementedToolServer) GetDescription(context.Context, *GetDescriptionRequest) (*ToolDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescription not implemented")
}
func (UnimplementedToolServer) Run(context.Context, *ToolRunRequest) (*ToolRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedToolServer) mustEmbedUnimplementedToolServer() {}

// UnsafeToolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServer will
// result in compilation errors.
type UnsafeToolServer interface {
	mustEmbedUnimplementedToolServer()
}

func RegisterToolServer(s grpc.ServiceRegistrar, srv ToolServer) {
	s.RegisterService(&Tool_ServiceDesc, srv)
}

func _Tool_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcp.Tool/GetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).GetDescription(ctx, req.(*GetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tool_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcp.Tool/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).Run(ctx, req.(*ToolRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tool_ServiceDesc is the grpc.ServiceDesc for Tool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.Tool",
	HandlerType: (*ToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDescription",
			Handler:    _Tool_GetDescription_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Tool_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MCP-NG/proto/mcp.proto",
}
