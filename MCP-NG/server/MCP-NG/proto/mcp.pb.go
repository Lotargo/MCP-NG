// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: MCP-NG/proto/mcp.proto

package mcp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListToolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListToolsRequest) Reset() {
	*x = ListToolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MCP_NG_proto_mcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListToolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListToolsRequest) ProtoMessage() {}

func (x *ListToolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MCP_NG_proto_mcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListToolsRequest.ProtoReflect.Descriptor instead.
func (*ListToolsRequest) Descriptor() ([]byte, []int) {
	return file_MCP_NG_proto_mcp_proto_rawDescGZIP(), []int{0}
}

type ListToolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tools []*ToolDescription `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"`
}

func (x *ListToolsResponse) Reset() {
	*x = ListToolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MCP_NG_proto_mcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListToolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListToolsResponse) ProtoMessage() {}

func (x *ListToolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MCP_NG_proto_mcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListToolsResponse.ProtoReflect.Descriptor instead.
func (*ListToolsResponse) Descriptor() ([]byte, []int) {
	return file_MCP_NG_proto_mcp_proto_rawDescGZIP(), []int{1}
}

func (x *ListToolsResponse) GetTools() []*ToolDescription {
	if x != nil {
		return x.Tools
	}
	return nil
}

type GetDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDescriptionRequest) Reset() {
	*x = GetDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MCP_NG_proto_mcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDescriptionRequest) ProtoMessage() {}

func (x *GetDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MCP_NG_proto_mcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDescriptionRequest.ProtoReflect.Descriptor instead.
func (*GetDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_MCP_NG_proto_mcp_proto_rawDescGZIP(), []int{2}
}

type ToolDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Parameters  *ToolParameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ToolDescription) Reset() {
	*x = ToolDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MCP_NG_proto_mcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolDescription) ProtoMessage() {}

func (x *ToolDescription) ProtoReflect() protoreflect.Message {
	mi := &file_MCP_NG_proto_mcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolDescription.ProtoReflect.Descriptor instead.
func (*ToolDescription) Descriptor() ([]byte, []int) {
	return file_MCP_NG_proto_mcp_proto_rawDescGZIP(), []int{3}
}

func (x *ToolDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ToolDescription) GetParameters() *ToolParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ToolParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Typically "object".
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Describes the parameters the tool accepts.
	Properties map[string]*ToolParameter `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Lists the required parameter names.
	Required []string `protobuf:"bytes,3,rep,name=required,proto3" json:"required,omitempty"`
}

func (x *ToolParameters) Reset() {
	*x = ToolParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MCP_NG_proto_mcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolParameters) ProtoMessage() {}

func (x *ToolParameters) ProtoReflect() protoreflect.Message {
	mi := &file_MCP_NG_proto_mcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolParameters.ProtoReflect.Descriptor instead.
func (*ToolParameters) Descriptor() ([]byte, []int) {
	return file_MCP_NG_proto_mcp_proto_rawDescGZIP(), []int{4}
}

func (x *ToolParameters) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ToolParameters) GetProperties() map[string]*ToolParameter {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ToolParameters) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

type ToolParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON schema types: "string", "number", "boolean", etc.
	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ToolParameter) Reset() {
	*x = ToolParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MCP_NG_proto_mcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolParameter) ProtoMessage() {}

func (x *ToolParameter) ProtoReflect() protoreflect.Message {
	mi := &file_MCP_NG_proto_mcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolParameter.ProtoReflect.Descriptor instead.
func (*ToolParameter) Descriptor() ([]byte, []int) {
	return file_MCP_NG_proto_mcp_proto_rawDescGZIP(), []int{5}
}

func (x *ToolParameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ToolParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ToolRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the tool to run.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The arguments for the tool, represented as a JSON object.
	Arguments *structpb.Struct `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ToolRunRequest) Reset() {
	*x = ToolRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MCP_NG_proto_mcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolRunRequest) ProtoMessage() {}

func (x *ToolRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MCP_NG_proto_mcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolRunRequest.ProtoReflect.Descriptor instead.
func (*ToolRunRequest) Descriptor() ([]byte, []int) {
	return file_MCP_NG_proto_mcp_proto_rawDescGZIP(), []int{6}
}

func (x *ToolRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolRunRequest) GetArguments() *structpb.Struct {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type ToolRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The result of the tool execution, can be any JSON value.
	Result *structpb.Value `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// An error message if the tool execution failed.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ToolRunResponse) Reset() {
	*x = ToolRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MCP_NG_proto_mcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolRunResponse) ProtoMessage() {}

func (x *ToolRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MCP_NG_proto_mcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolRunResponse.ProtoReflect.Descriptor instead.
func (*ToolRunResponse) Descriptor() ([]byte, []int) {
	return file_MCP_NG_proto_mcp_proto_rawDescGZIP(), []int{7}
}

func (x *ToolRunResponse) GetResult() *structpb.Value {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ToolRunResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_MCP_NG_proto_mcp_proto protoreflect.FileDescriptor

var file_MCP_NG_proto_mcp_proto_rawDesc = []byte{
	0x0a, 0x16, 0x4d, 0x43, 0x50, 0x2d, 0x4e, 0x47, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d,
	0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x63, 0x70, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x3f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x0f, 0x54, 0x6f, 0x6f,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x54, 0x6f, 0x6f,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a,
	0x51, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x45, 0x0a, 0x0d, 0x54, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0e, 0x54, 0x6f, 0x6f,
	0x6c, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32,
	0x77, 0x0a, 0x03, 0x4d, 0x43, 0x50, 0x12, 0x3a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x63, 0x70,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x13, 0x2e,
	0x6d, 0x63, 0x70, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x7c, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c,
	0x12, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x13, 0x2e, 0x6d, 0x63,
	0x70, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x6d, 0x63, 0x70, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x13, 0x5a, 0x11, 0x6d, 0x63, 0x70, 0x2d, 0x6e, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6d, 0x63, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_MCP_NG_proto_mcp_proto_rawDescOnce sync.Once
	file_MCP_NG_proto_mcp_proto_rawDescData = file_MCP_NG_proto_mcp_proto_rawDesc
)

func file_MCP_NG_proto_mcp_proto_rawDescGZIP() []byte {
	file_MCP_NG_proto_mcp_proto_rawDescOnce.Do(func() {
		file_MCP_NG_proto_mcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_MCP_NG_proto_mcp_proto_rawDescData)
	})
	return file_MCP_NG_proto_mcp_proto_rawDescData
}

var file_MCP_NG_proto_mcp_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_MCP_NG_proto_mcp_proto_goTypes = []interface{}{
	(*ListToolsRequest)(nil),      // 0: mcp.ListToolsRequest
	(*ListToolsResponse)(nil),     // 1: mcp.ListToolsResponse
	(*GetDescriptionRequest)(nil), // 2: mcp.GetDescriptionRequest
	(*ToolDescription)(nil),       // 3: mcp.ToolDescription
	(*ToolParameters)(nil),        // 4: mcp.ToolParameters
	(*ToolParameter)(nil),         // 5: mcp.ToolParameter
	(*ToolRunRequest)(nil),        // 6: mcp.ToolRunRequest
	(*ToolRunResponse)(nil),       // 7: mcp.ToolRunResponse
	nil,                           // 8: mcp.ToolParameters.PropertiesEntry
	(*structpb.Struct)(nil),       // 9: google.protobuf.Struct
	(*structpb.Value)(nil),        // 10: google.protobuf.Value
}
var file_MCP_NG_proto_mcp_proto_depIdxs = []int32{
	3,  // 0: mcp.ListToolsResponse.tools:type_name -> mcp.ToolDescription
	4,  // 1: mcp.ToolDescription.parameters:type_name -> mcp.ToolParameters
	8,  // 2: mcp.ToolParameters.properties:type_name -> mcp.ToolParameters.PropertiesEntry
	9,  // 3: mcp.ToolRunRequest.arguments:type_name -> google.protobuf.Struct
	10, // 4: mcp.ToolRunResponse.result:type_name -> google.protobuf.Value
	5,  // 5: mcp.ToolParameters.PropertiesEntry.value:type_name -> mcp.ToolParameter
	0,  // 6: mcp.MCP.ListTools:input_type -> mcp.ListToolsRequest
	6,  // 7: mcp.MCP.RunTool:input_type -> mcp.ToolRunRequest
	2,  // 8: mcp.Tool.GetDescription:input_type -> mcp.GetDescriptionRequest
	6,  // 9: mcp.Tool.Run:input_type -> mcp.ToolRunRequest
	1,  // 10: mcp.MCP.ListTools:output_type -> mcp.ListToolsResponse
	7,  // 11: mcp.MCP.RunTool:output_type -> mcp.ToolRunResponse
	3,  // 12: mcp.Tool.GetDescription:output_type -> mcp.ToolDescription
	7,  // 13: mcp.Tool.Run:output_type -> mcp.ToolRunResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_MCP_NG_proto_mcp_proto_init() }
func file_MCP_NG_proto_mcp_proto_init() {
	if File_MCP_NG_proto_mcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_MCP_NG_proto_mcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListToolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MCP_NG_proto_mcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListToolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MCP_NG_proto_mcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MCP_NG_proto_mcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MCP_NG_proto_mcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MCP_NG_proto_mcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MCP_NG_proto_mcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MCP_NG_proto_mcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MCP_NG_proto_mcp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_MCP_NG_proto_mcp_proto_goTypes,
		DependencyIndexes: file_MCP_NG_proto_mcp_proto_depIdxs,
		MessageInfos:      file_MCP_NG_proto_mcp_proto_msgTypes,
	}.Build()
	File_MCP_NG_proto_mcp_proto = out.File
	file_MCP_NG_proto_mcp_proto_rawDesc = nil
	file_MCP_NG_proto_mcp_proto_goTypes = nil
	file_MCP_NG_proto_mcp_proto_depIdxs = nil
}
