// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: mcp.proto

package mcp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MCP_ListTools_FullMethodName         = "/mcp.MCP/ListTools"
	MCP_ExecuteTool_FullMethodName       = "/mcp.MCP/ExecuteTool"
	MCP_ProvideHumanInput_FullMethodName = "/mcp.MCP/ProvideHumanInput"
	MCP_GetHumanInput_FullMethodName     = "/mcp.MCP/GetHumanInput"
)

// MCPClient is the client API for MCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MCP (Master Control Program) is the primary service for orchestrating tools.
type MCPClient interface {
	// Returns a list of all available and healthy tools.
	ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error)
	// *** KEY CHANGE: Executes a tool as part of an async-ready task. ***
	ExecuteTool(ctx context.Context, in *ExecuteToolRequest, opts ...grpc.CallOption) (*ExecuteToolResponse, error)
	// Allows a human operator to provide a response for a pending task.
	ProvideHumanInput(ctx context.Context, in *ProvideHumanInputRequest, opts ...grpc.CallOption) (*ProvideHumanInputResponse, error)
	// Polls for the status and result of a human input task.
	GetHumanInput(ctx context.Context, in *GetHumanInputRequest, opts ...grpc.CallOption) (*GetHumanInputResponse, error)
}

type mCPClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPClient(cc grpc.ClientConnInterface) MCPClient {
	return &mCPClient{cc}
}

func (c *mCPClient) ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListToolsResponse)
	err := c.cc.Invoke(ctx, MCP_ListTools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPClient) ExecuteTool(ctx context.Context, in *ExecuteToolRequest, opts ...grpc.CallOption) (*ExecuteToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteToolResponse)
	err := c.cc.Invoke(ctx, MCP_ExecuteTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPClient) ProvideHumanInput(ctx context.Context, in *ProvideHumanInputRequest, opts ...grpc.CallOption) (*ProvideHumanInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvideHumanInputResponse)
	err := c.cc.Invoke(ctx, MCP_ProvideHumanInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPClient) GetHumanInput(ctx context.Context, in *GetHumanInputRequest, opts ...grpc.CallOption) (*GetHumanInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHumanInputResponse)
	err := c.cc.Invoke(ctx, MCP_GetHumanInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCPServer is the server API for MCP service.
// All implementations must embed UnimplementedMCPServer
// for forward compatibility.
//
// MCP (Master Control Program) is the primary service for orchestrating tools.
type MCPServer interface {
	// Returns a list of all available and healthy tools.
	ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error)
	// *** KEY CHANGE: Executes a tool as part of an async-ready task. ***
	ExecuteTool(context.Context, *ExecuteToolRequest) (*ExecuteToolResponse, error)
	// Allows a human operator to provide a response for a pending task.
	ProvideHumanInput(context.Context, *ProvideHumanInputRequest) (*ProvideHumanInputResponse, error)
	// Polls for the status and result of a human input task.
	GetHumanInput(context.Context, *GetHumanInputRequest) (*GetHumanInputResponse, error)
	mustEmbedUnimplementedMCPServer()
}

// UnimplementedMCPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMCPServer struct{}

func (UnimplementedMCPServer) ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTools not implemented")
}
func (UnimplementedMCPServer) ExecuteTool(context.Context, *ExecuteToolRequest) (*ExecuteToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTool not implemented")
}
func (UnimplementedMCPServer) ProvideHumanInput(context.Context, *ProvideHumanInputRequest) (*ProvideHumanInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideHumanInput not implemented")
}
func (UnimplementedMCPServer) GetHumanInput(context.Context, *GetHumanInputRequest) (*GetHumanInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumanInput not implemented")
}
func (UnimplementedMCPServer) mustEmbedUnimplementedMCPServer() {}
func (UnimplementedMCPServer) testEmbeddedByValue()             {}

// UnsafeMCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServer will
// result in compilation errors.
type UnsafeMCPServer interface {
	mustEmbedUnimplementedMCPServer()
}

func RegisterMCPServer(s grpc.ServiceRegistrar, srv MCPServer) {
	// If the following call pancis, it indicates UnimplementedMCPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MCP_ServiceDesc, srv)
}

func _MCP_ListTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).ListTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCP_ListTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).ListTools(ctx, req.(*ListToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCP_ExecuteTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).ExecuteTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCP_ExecuteTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).ExecuteTool(ctx, req.(*ExecuteToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCP_ProvideHumanInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideHumanInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).ProvideHumanInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCP_ProvideHumanInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).ProvideHumanInput(ctx, req.(*ProvideHumanInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCP_GetHumanInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumanInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServer).GetHumanInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCP_GetHumanInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServer).GetHumanInput(ctx, req.(*GetHumanInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MCP_ServiceDesc is the grpc.ServiceDesc for MCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.MCP",
	HandlerType: (*MCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTools",
			Handler:    _MCP_ListTools_Handler,
		},
		{
			MethodName: "ExecuteTool",
			Handler:    _MCP_ExecuteTool_Handler,
		},
		{
			MethodName: "ProvideHumanInput",
			Handler:    _MCP_ProvideHumanInput_Handler,
		},
		{
			MethodName: "GetHumanInput",
			Handler:    _MCP_GetHumanInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcp.proto",
}

const (
	Tool_GetDescription_FullMethodName = "/mcp.Tool/GetDescription"
	Tool_Run_FullMethodName            = "/mcp.Tool/Run"
)

// ToolClient is the client API for Tool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Tool defines the service contract that each individual tool must implement.
type ToolClient interface {
	// Returns the tool's description, including its name, purpose, and parameters.
	GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*ToolDescription, error)
	// Executes the tool's primary logic. This is for internal communication between MCP and the tool.
	Run(ctx context.Context, in *ToolRunRequest, opts ...grpc.CallOption) (*ToolRunResponse, error)
}

type toolClient struct {
	cc grpc.ClientConnInterface
}

func NewToolClient(cc grpc.ClientConnInterface) ToolClient {
	return &toolClient{cc}
}

func (c *toolClient) GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*ToolDescription, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolDescription)
	err := c.cc.Invoke(ctx, Tool_GetDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toolClient) Run(ctx context.Context, in *ToolRunRequest, opts ...grpc.CallOption) (*ToolRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolRunResponse)
	err := c.cc.Invoke(ctx, Tool_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServer is the server API for Tool service.
// All implementations must embed UnimplementedToolServer
// for forward compatibility.
//
// Tool defines the service contract that each individual tool must implement.
type ToolServer interface {
	// Returns the tool's description, including its name, purpose, and parameters.
	GetDescription(context.Context, *GetDescriptionRequest) (*ToolDescription, error)
	// Executes the tool's primary logic. This is for internal communication between MCP and the tool.
	Run(context.Context, *ToolRunRequest) (*ToolRunResponse, error)
	mustEmbedUnimplementedToolServer()
}

// UnimplementedToolServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToolServer struct{}

func (UnimplementedToolServer) GetDescription(context.Context, *GetDescriptionRequest) (*ToolDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescription not implemented")
}
func (UnimplementedToolServer) Run(context.Context, *ToolRunRequest) (*ToolRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedToolServer) mustEmbedUnimplementedToolServer() {}
func (UnimplementedToolServer) testEmbeddedByValue()              {}

// UnsafeToolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolServer will
// result in compilation errors.
type UnsafeToolServer interface {
	mustEmbedUnimplementedToolServer()
}

func RegisterToolServer(s grpc.ServiceRegistrar, srv ToolServer) {
	// If the following call pancis, it indicates UnimplementedToolServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tool_ServiceDesc, srv)
}

func _Tool_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tool_GetDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).GetDescription(ctx, req.(*GetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tool_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tool_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).Run(ctx, req.(*ToolRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tool_ServiceDesc is the grpc.ServiceDesc for Tool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.Tool",
	HandlerType: (*ToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDescription",
			Handler:    _Tool_GetDescription_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Tool_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcp.proto",
}
